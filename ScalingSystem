return function(guiObj)
	local newUIScale = guiObj:FindFirstChildOfClass("UIScale") or Instance.new("UIScale", guiObj)
	local SCALE_TAG = "UIScale"
	local SCALE_ATTRIBUTE = "Scale"
	local RESOLUTION_ATTRIBUTE = "Resolution"
	local DEFAULT_SCALE = 1
	local DEFAULT_RESOLUTION = 720
	local Collection = game:GetService("CollectionService")
	local camera = workspace.CurrentCamera
	local currentScale = guiObj:GetAttribute(SCALE_ATTRIBUTE)
	if currentScale == nil then
		currentScale = DEFAULT_SCALE
		guiObj:SetAttribute(SCALE_ATTRIBUTE, currentScale)
	end
	local resolution = guiObj:GetAttribute(RESOLUTION_ATTRIBUTE)
	if resolution == nil then
		resolution = DEFAULT_RESOLUTION
		guiObj:SetAttribute(RESOLUTION_ATTRIBUTE, resolution)
	end
	local multiplier = 1/resolution
	local scales = {}
	local function applyScale(scale)
		scale.Scale = currentScale
	end
	local function scaleAdded(scale)
		assert(scale:IsA("UIScale"), scale:GetFullName() .. " is not a UIScale")

		applyScale(scale)
		table.insert(scales, scale)
	end
	local function scaleRemoved(scale)
		local index = table.find(scales, scale)
		if index then
			table.remove(scales, index)
		end
	end
	local function updateScale()
		local sizeX, sizeY = camera.ViewportSize.X, camera.ViewportSize.Y
		if sizeY < sizeX then
			currentScale = multiplier * sizeY
		else
			currentScale = multiplier * sizeX
		end

		guiObj:SetAttribute(SCALE_ATTRIBUTE, currentScale)
		for i, scale in ipairs(scales) do
			applyScale(scale)
		end
	end
	for i, scale in ipairs(Collection:GetTagged(SCALE_TAG)) do
		scaleAdded(scale)
	end
	updateScale()
	guiObj:GetAttributeChangedSignal(RESOLUTION_ATTRIBUTE):Connect(function()
		resolution = guiObj:GetAttribute(RESOLUTION_ATTRIBUTE)
		multiplier = 1/resolution
		updateScale()
	end)
	camera:GetPropertyChangedSignal("ViewportSize"):Connect(updateScale)
	Collection:GetInstanceAddedSignal(SCALE_TAG):Connect(scaleAdded)
	Collection:GetInstanceRemovedSignal(SCALE_TAG):Connect(scaleRemoved)
	
	game:GetService('CollectionService'):AddTag(newUIScale, "UIScale")
end
